<style media="screen">
  .main {
    padding: 0;
  }

  .text, .code {
    padding-left: 15px;
    padding-right: 15px;
  }

  .code {
    background: #232323;
    box-sizing: border-box;
    border-top: 1px solid #333336;
    border-bottom: 1px solid #333336;
    color: orange;
  }

  .code code {
    white-space: pre-wrap;
    color: inherit;
  }

</style>

<?php if (isset($_COOKIE['lighttheme'])): ?>
  <style media="screen">
    .code {
      background: #d4d4d9;
      border-top-color: #ddd;
      border-bottom-color: #ddd;
      color: #343434;
    }
  </style>
<?php endif ?>
<div class="text">
  <h2>Сортировка</h2>
  <p>Перед тем, как рассуждать, как сделать сортировку правильно и быстро, мы должны сначала понять, что это вообще такое. <br>
  Сортировка - это такой алгоритм, который позволяет отсортировать какую-то структуру данных. Так, это уже лучше, теперь надо понять, что называется отсортированным.
  Отсортированная структура данных - это такая структура данных, элементы которой расположены в каком-то заданном порядке, есть какое-то правило, по которому они сортируются.
  <br> Например массив [1, 7, 5, 3, 2] не отсортирован в подярке возрастания, а массив [1, 2, 3, 5, 7] - да.</p>
  <p>Итак мы разобрались с целью, теперь приступим к размышлению.</p>
  <h3>Сортировка <abbr title="Пузырьком её назвали в честь того, что элемент в процессе сортировки 'поднимается' наверх">"пузырьком"</abbr></h3>
  <h4>Алгоритм</h4>
  <p>N раз обходим массив, и если два подряд идущих элемента стоят <b>не</b> по порядку, меняем их местами.</p>
  <p>Скорость: O(n<sup>2</sup>)</p>
  <p>Память: O(1)</p>
  <h4>Доказательство</h4>
  <p>На самом деле тут всё банально просто. За 1 проход мы переместим 1 элемент в самый конец - это и будет являться тот элемент, который и должен там стоять => за n операций таких
  элементов будет n.</p>
  <h4>Пример (сортировка по возрастанию)</h4>
</div>

<div class="code">
  <code>
#include &ltbits/stdc++.h&gt

using namespace std;

int main() {
  int n;
  cin >> n;
  vector&ltint&gt vect(n);
  for (int &x : vect)
    cin >> x;
  for (int i = 0; i < n; ++i) {
    for (int j = 1; j < n; ++j) {
      if (vect[j - 1] > vect[j]) {
        swap(vect[j - 1], vect[j]);
      }
    }
  }
  for (int x : vect)
    cout << x << " ";
  return 0;

}
</code>
</div>
